<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小黑</title>
  
  
  <link href="https://black0923.github.io/atom.xml" rel="self"/>
  
  <link href="https://black0923.github.io/"/>
  <updated>2022-08-30T06:06:01.700Z</updated>
  <id>https://black0923.github.io/</id>
  
  <author>
    <name>black0923</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数组扁平化</title>
    <link href="https://black0923.github.io/2022/08/30/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
    <id>https://black0923.github.io/2022/08/30/%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</id>
    <published>2022-08-30T02:09:14.000Z</published>
    <updated>2022-08-30T06:06:01.700Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">把嵌套n层的数组，转换成一层，例如：</span><br><span class="line">[1,[2,3,[4,5]]]======&gt;[1,2,3,4,5]</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = []</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))&#123;</span><br><span class="line">            data = data.<span class="title function_">concat</span>(<span class="title function_">flatten</span>(item))</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            data.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr)) <span class="comment">//  [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]]</span><br><span class="line"><span class="keyword">while</span> (arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(item))) &#123;</span><br><span class="line">    arr = [].<span class="title function_">concat</span>(...arr)</span><br><span class="line">    <span class="comment">// concat : 合并多个数组、单项并返回一个新的数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//  [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h2 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认转换嵌套层数1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>()); <span class="comment">//  [1, 2, 3, [4, 5]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">1</span>)); <span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定转换的嵌套层数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">2</span>)); <span class="comment">//  [1, 2, 3, 4, 5]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不管嵌套多少层</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)); <span class="comment">//  [1, 2, 3, 4, 5]</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 自动跳过空位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, [<span class="number">2</span>, , <span class="number">3</span>]].<span class="title function_">flat</span>()); <span class="comment">//  [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不改变原数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">//  [1,[2,3,[4,5]]]</span></span><br></pre></td></tr></table></figure><h2 id="toString-split"><a href="#toString-split" class="headerlink" title="toString + split"></a>toString + split</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]]</span><br><span class="line">arr = arr.<span class="title function_">toString</span>() <span class="comment">// &#x27;1,2,3,4,5&#x27; join方法也可以</span></span><br><span class="line">arr = arr.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>) <span class="comment">//  [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;]</span></span><br><span class="line">arr = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="title class_">Number</span>(item)) <span class="comment">//  [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;把嵌套n层的数组，转换成一层，例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1,[2,3,[4,5]]]======&amp;gt;[1,2,3,4,5]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://black0923.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>输入URL到页面展示过程</title>
    <link href="https://black0923.github.io/2022/08/26/%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E8%BF%87%E7%A8%8B/"/>
    <id>https://black0923.github.io/2022/08/26/%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%E8%BF%87%E7%A8%8B/</id>
    <published>2022-08-26T03:33:04.000Z</published>
    <updated>2022-08-26T04:13:19.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查找缓存"><a href="#查找缓存" class="headerlink" title="查找缓存"></a>查找缓存</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，</span><br><span class="line">如果有则显示页面内容。如果没有则进行下一步。</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判断URL是否是一个域名，解析实现域名和ip的转换，并缓存结果</span><br></pre></td></tr></table></figure><h2 id="建立TCP连接"><a href="#建立TCP连接" class="headerlink" title="建立TCP连接"></a>建立TCP连接</h2><p><img src="/images/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.webp" alt="三次握手"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">为了建立连接TCP连接，通信双方必须从对方了解如下信息： </span><br><span class="line">1、对方报文发送的开始序号。</span><br><span class="line">2、对方发送数据的缓冲区大小。</span><br><span class="line">3、能被接收的最大报文段长度MSS。</span><br><span class="line">4、被支持的TCP选项。</span><br><span class="line">在TCP协议中，通信双方将通过三次TCP报文实现对以上信息的了解，</span><br><span class="line">并在此基础上建立一个TCP连接，而通信双方的三次TCP报文段的交换过程，</span><br><span class="line">也就是通常所说的TCP连接建立实现的三次握手(Three-Way Handshake)过程。</span><br></pre></td></tr></table></figure><h2 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h2><h2 id="服务器响应请求并返回结果"><a href="#服务器响应请求并返回结果" class="headerlink" title="服务器响应请求并返回结果"></a>服务器响应请求并返回结果</h2><h2 id="关闭TCP连接"><a href="#关闭TCP连接" class="headerlink" title="关闭TCP连接"></a>关闭TCP连接</h2><p><img src="/images/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.webp" alt="四次挥手"></p><h2 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">客户端（浏览器）解析HTML内容并渲染出来</span><br><span class="line">构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象</span><br><span class="line">构建CSS规则树：生成CSS规则树（CSS Rule Tree）</span><br><span class="line">构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）</span><br><span class="line">布局（Layout）：计算出每个节点在屏幕中的位置</span><br><span class="line">绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;查找缓存&quot;&gt;&lt;a href=&quot;#查找缓存&quot; class=&quot;headerlink&quot; title=&quot;查找缓存&quot;&gt;&lt;/a&gt;查找缓存&lt;/h2&gt;&lt;figure class=&quot;highlight text&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;如果有则显示页面内容。如果没有则进行下一步。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="浏览器" scheme="https://black0923.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>怎么结合Hexo在GitHub搭建自己的博客网站</title>
    <link href="https://black0923.github.io/2022/08/17/%E6%80%8E%E4%B9%88%E7%BB%93%E5%90%88Hexo%E5%9C%A8GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>https://black0923.github.io/2022/08/17/%E6%80%8E%E4%B9%88%E7%BB%93%E5%90%88Hexo%E5%9C%A8GitHub%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</id>
    <published>2022-08-17T06:16:08.000Z</published>
    <updated>2022-08-25T09:19:56.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建GitHub-Pages项目"><a href="#创建GitHub-Pages项目" class="headerlink" title="创建GitHub Pages项目"></a>创建<a href="https://pages.github.com/">GitHub Pages</a>项目</h2><h3 id="首先你需要注册一个-GitHub-账号，并在个人主界面里选择创建一个新的-Repository-。"><a href="#首先你需要注册一个-GitHub-账号，并在个人主界面里选择创建一个新的-Repository-。" class="headerlink" title="首先你需要注册一个 GitHub 账号，并在个人主界面里选择创建一个新的 Repository 。"></a>首先你需要注册一个 GitHub 账号，并在个人主界面里选择创建一个新的 Repository 。</h3><p>项目命名格式：username.github.io，并设置为Public<br><img src="/images/new_repository.png" alt="new_repository"><br>新建index.html写入内容提交代码后<br>在配置中找到pages项，配置使用哪个分支代码<br><img src="/images/setting.png" alt="new_repository"><br>打开 username.github.io 就可以看到自己的GitHub Pages了</p><h2 id="使用HEXO"><a href="#使用HEXO" class="headerlink" title="使用HEXO"></a>使用<a href="https://hexo.io/zh-cn/docs/">HEXO</a></h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：<br>·<a href="https://nodejs.org/en/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)<br>·<a href="https://git-scm.com/">Git</a><br>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>进阶安装和使用<br>对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure><h3 id="新建-Hexo项目"><a href="#新建-Hexo项目" class="headerlink" title="新建 Hexo项目"></a>新建 Hexo项目</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init my_hexo_demo</span><br><span class="line">cd my_hexo_demo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="运行-Hexo项目"><a href="#运行-Hexo项目" class="headerlink" title="运行 Hexo项目"></a>运行 Hexo项目</h3><p>安装完依赖 使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure><p>启动服务，就可以在<a href="http://localhost:4000/">本机4000端口</a>查看效果</p><h2 id="使用Hexo编译并更新到GitHub分支"><a href="#使用Hexo编译并更新到GitHub分支" class="headerlink" title="使用Hexo编译并更新到GitHub分支"></a>使用Hexo编译并更新到GitHub分支</h2><p>根目录找到_config.yml文件，并配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## 在此处设置您的网站url。例如，如果您使用GitHub页面</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://black0923.github.io</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">你的GitHub代码仓</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">pages分支</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译并上传到GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>稍等待后 刷新username.github.io 就可以了<br>pages分支代码是hexo编译后的.deploy_git</p>]]></content>
    
    
    <summary type="html"> </summary>
    
    
    
    
    <category term="GitHub" scheme="https://black0923.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://black0923.github.io/2022/08/17/hello-world/"/>
    <id>https://black0923.github.io/2022/08/17/hello-world/</id>
    <published>2022-08-16T16:00:00.000Z</published>
    <updated>2022-08-25T07:02:27.985Z</updated>
    
    <content type="html"><![CDATA[<p>我的第一篇blog，欢迎参观我的<a href="https://github.com/black0923">GitHub</a></p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;p&gt;我的第一篇blog，欢迎参观我的&lt;a href=&quot;https://github.com/black0923&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
